import os
import sys
import time
import pyautogui
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# ================= C·∫¨P NH·∫¨T CHO M√ÅY B·∫†N =================
# ƒê∆∞·ªùng d·∫´n t·ªõi file chromedriver.exe (ho·∫∑c chromedriver tr√™n macOS/Linux)
CHROME_DRIVER_PATH = r"chromedriver.exe"

# N·∫øu mu·ªën ch·∫°y v·ªõi profile Chrome ƒë√£ login s·∫µn, g√°n USER_DATA_DIR.
# N·∫øu kh√¥ng, ƒë·∫∑t USER_DATA_DIR = None ho·∫∑c comment d√≤ng d∆∞·ªõi.
# V√≠ d·ª• Windows: r"C:\Users\YourName\AppData\Local\Google\Chrome\User Data"
USER_DATA_DIR = r"C:\chrome-profile\tiktok-persistent"

# ƒê∆∞·ªùng d·∫´n TikTok ƒë√£ login
TIKTOK_URL = "https://www.tiktok.com/"
TIKTOK_URL_EXPLORE = "https://www.tiktok.com/explore"
# =====================================================


def setup_driver(
    chrome_driver_path: str = CHROME_DRIVER_PATH,
    user_data_dir: str = USER_DATA_DIR,
    window_position: tuple[int, int] = (0, 0),
    window_size: tuple[int, int] = (1300, 850),
    device_scale_factor: float = 0.9,
) -> webdriver.Chrome:
    """
    Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ m·ªôt instance c·ªßa Chrome WebDriver v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u:
      - S·ª≠ d·ª•ng profile ƒë√£ login (n·∫øu user_data_dir kh√¥ng None v√† t·ªìn t·∫°i).
      - Thi·∫øt l·∫≠p DPI v√† t·ªâ l·ªá hi·ªÉn th·ªã ƒë·ªÉ PyAutoGUI thao t√°c ch√≠nh x√°c.
      - C·ªë ƒë·ªãnh v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc c·ª≠a s·ªï.
      - T·∫Øt th√¥ng b√°o.
    """
    options = Options()

    # N·∫øu th∆∞ m·ª•c profile t·ªìn t·∫°i, th√™m ƒë·ªÉ Chrome load profile ƒë√£ login
    if user_data_dir and os.path.isdir(user_data_dir):
        options.add_argument(f"--user-data-dir={user_data_dir}")

    # Thi·∫øt l·∫≠p DPI scaling cho m√†n h√¨nh ƒë·ªô ph√¢n gi·∫£i cao
    options.add_argument("--high-dpi-support=1")
    options.add_argument(f"--force-device-scale-factor={device_scale_factor}")

    # C·ªë ƒë·ªãnh v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc c·ª≠a s·ªï ƒë·ªÉ PyAutoGUI thao t√°c ch√≠nh x√°c
    xpos, ypos = window_position
    width, height = window_size
    options.add_argument(f"--window-position={xpos},{ypos}")
    options.add_argument(f"--window-size={width},{height}")

    # T·∫Øt popup/notification
    options.add_argument("--disable-notifications")

    # Kh·ªüi t·∫°o ChromeDriver
    try:
        service = ChromeService(executable_path=chrome_driver_path)
        driver = webdriver.Chrome(service=service, options=options)
    except Exception as e:
        print("‚ùå L·ªói khi kh·ªüi t·∫°o ChromeDriver. Vui l√≤ng ki·ªÉm tra:")
        print("   1) CHROME_DRIVER_PATH c√≥ ƒë√∫ng kh√¥ng?")
        print("   2) ChromeDriver c√≥ kh·ªõp v·ªõi phi√™n b·∫£n Chrome ƒëang d√πng kh√¥ng?")
        print("   3) USER_DATA_DIR c√≥ t·ªìn t·∫°i v√† h·ª£p l·ªá kh√¥ng?")
        print("Chi ti·∫øt l·ªói:", e)
        sys.exit(1)

    return driver


def like_button(driver):
    # ===========================
    # 1. T√¨m t·∫•t c·∫£ n√∫t "Th√≠ch" r·ªìi click t·ª´ng c√°i
    # ===========================
    try:
        like_spans = driver.find_elements(
            By.CSS_SELECTOR, "span[data-e2e='like-icon']"
        )  # like-icon
        browse_like_icon = driver.find_elements(
            By.CSS_SELECTOR, "span[data-e2e='browse-like-icon']"
        )  # browse-like-icon

        # comment_like_icon = driver.find_elements(
        #     By.CSS_SELECTOR, "div[data-e2e='comment-like-icon']"
        # )  # comment-like-icon
        # if comment_like_icon:
        #     like_spans.extend(comment_like_icon)

        if not like_spans:
            like_spans = browse_like_icon

        print(f"üîç T√¨m th·∫•y {len(like_spans)} n√∫t Th√≠ch.")
        for idx, btn in enumerate(like_spans, start=1):
            try:
                # L·∫•y ph·∫ßn t·ª≠ cha (button) t·ª´ span n·∫øu c·∫ßn
                parent_button = btn.find_element(By.XPATH, "./ancestor::button[1]")
                parent_button.click()
                print(f"  ‚úì ƒê√£ click n√∫t Th√≠ch th·ª© {idx}.")
                time.sleep(0.5)  # ƒë·ª£i TikTok ghi nh·∫≠n
            except Exception as e:
                print(f"  ‚ö† L·ªói khi click n√∫t Th√≠ch th·ª© {idx}: {e}")
    except Exception as e:
        print(f"    ‚ùå L·ªói khi t√¨m/nh·∫•n n√∫t Like (Tym):", e)


def next_button(driver, wait):
    # ===========================
    # T√¨m t·∫•t c·∫£ n√∫t "Chuy·ªÉn ti·∫øp video" r·ªìi click t·ª´ng c√°i
    # ===========================
    try:
        wait.until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "button.action-item"))
        )
        # T√¨m t·∫•t c·∫£ c√°c n√∫t "Next" b·∫±ng c√°ch locate <svg> c√≥ path gi·ªëng chuy·ªÉn video
        next_buttons = driver.find_elements(
            By.XPATH,
            '//svg[path[@d="m24 27.76 13.17-13.17a1 1 0 0 1 1.42 0l2.82 2.82a1 1 0 0 1 0 1.42L25.06 35.18a1.5 1.5 0 0 1-2.12 0L6.59 18.83a1 1 0 0 1 0-1.42L9.4 14.6a1 1 0 0 1 1.42 0L24 27.76Z"]]',
        )
        print(f"üîç T√¨m th·∫•y {len(next_buttons)} n√∫t Chuy·ªÉn ti·∫øp video.")
        for idx, btn in enumerate(next_buttons, start=1):
            try:
                # Click v√†o button ƒë·∫ßu ti√™n trong danh s√°ch (chuy·ªÉn sang video k·∫ø)
                btn.click()
                print(f"  ‚Üí ƒê√£ click n√∫t Next th·ª© {idx}.")
                time.sleep(1)  # ƒë·ª£i video m·ªõi load
            except Exception as e:
                print(f"  ‚ö† L·ªói khi click n√∫t Next th·ª© {idx}: {e}")
    except Exception as e:
        print("    ‚ùå L·ªói khi t√¨m/nh·∫•n n√∫t Next (Chuy·ªÉn video):", e)


def press_arrow_down():
    # Th·ªùi gian ƒë·ª£i tr∆∞·ªõc khi g·ª≠i ph√≠m (n·∫øu c·∫ßn)
    time.sleep(2.5)
    # -------------------------------------
    pyautogui.keyDown("down")  # Nh·∫•n gi·ªØ
    # -------------------------------------

    # -------------------------------------
    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # time.sleep(0.2)            # Gi·ªØ key
    # pyautogui.keyUp('down')   # Th·∫£ ph√≠m

    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # time.sleep(0.2)           # Gi·ªØ key
    # pyautogui.keyUp('down')   # Th·∫£ ph√≠m
    # -------------------------------------


def main():
    # Kh·ªüi ƒë·ªông WebDriver v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
    driver = setup_driver()

    # M·ªü r·ªông c·ª≠a s·ªï tr√¨nh duy·ªát ƒë·ªÉ PyAutoGUI click ch√≠nh x√°c
    driver.maximize_window()

    # ƒêi·ªÅu h∆∞·ªõng t·ªõi TikTok
    driver.get(TIKTOK_URL_EXPLORE)

    # ƒê·ª£i t·∫°m 3s ƒë·ªÉ ƒë·∫£m b·∫£o JS, CSS, video, popup load xong
    time.sleep(3)

    print("‚ñ∂ B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p t·ª± ƒë·ªông Like + Next. Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.")
    try:
        # V√≤ng l·∫∑p v√¥ h·∫°n: Like r·ªìi Next li√™n t·ª•c
        while True:
            # ========== T√¨m v√† click n√∫t "Like" (Tym) ==========
            like_button(driver)

            # ========== T√¨m v√† click n√∫t "Next" (Chuy·ªÉn video) ==========
            # next_button(driver, wait)
            press_arrow_down()
    except KeyboardInterrupt:
        # Khi ng∆∞·ªùi d√πng nh·∫•n Ctrl+C, s·∫Ω b·∫Øt v√†o ƒë√¢y ƒë·ªÉ d·ªçn d·∫πp
        print("\n‚ñ† Nh·∫≠n l·ªánh d·ª´ng t·ª´ ng∆∞·ªùi d√πng, ch∆∞∆°ng tr√¨nh s·∫Ω ƒë√≥ng tr√¨nh duy·ªát.")
    finally:
        # ƒê·∫£m b·∫£o driver.quit() lu√¥n ƒë∆∞·ª£c g·ªçi d√π c√≥ l·ªói hay kh√¥ng
        driver.quit()
        print("‚ñ† Tr√¨nh duy·ªát ƒë√£ ƒë√≥ng. K·∫øt th√∫c ch∆∞∆°ng tr√¨nh.")


if __name__ == "__main__":
    main()
