import os
import sys
import time
import pyautogui
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service as ChromeService

# ================= C·∫¨P NH·∫¨T CHO M√ÅY B·∫†N =================
# ƒê∆∞·ªùng d·∫´n t·ªõi file chromedriver.exe (ho·∫∑c chromedriver tr√™n macOS/Linux)
CHROME_DRIVER_PATH = r"chromedriver.exe"

# N·∫øu mu·ªën ch·∫°y v·ªõi profile Chrome ƒë√£ login s·∫µn, g√°n USER_DATA_DIR.
# N·∫øu kh√¥ng, ƒë·∫∑t USER_DATA_DIR = None ho·∫∑c comment d√≤ng d∆∞·ªõi.
# V√≠ d·ª• Windows: r"C:\Users\YourName\AppData\Local\Google\Chrome\User Data"
# USER_DATA_DIR = r"C:\chrome-profile\tiktok-persistent"
USER_DATA_DIR = r"C:\chrome-profile\tiktok-nhanha1007"

# ƒê∆∞·ªùng d·∫´n TikTok ƒë√£ login
TIKTOK_URL = "https://www.tiktok.com/"
TIKTOK_URL_EXPLORE = "https://www.tiktok.com/explore"
# =====================================================


def setup_driver(
    chrome_driver_path: str = CHROME_DRIVER_PATH,
    user_data_dir: str = USER_DATA_DIR,
    window_position: tuple[int, int] = (0, 0),
    window_size: tuple[int, int] = (1300, 850),
    device_scale_factor: float = 0.9,
) -> webdriver.Chrome:
    """
    Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ m·ªôt instance c·ªßa Chrome WebDriver v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u:
      - S·ª≠ d·ª•ng profile ƒë√£ login (n·∫øu user_data_dir kh√¥ng None v√† t·ªìn t·∫°i).
      - Thi·∫øt l·∫≠p DPI v√† t·ªâ l·ªá hi·ªÉn th·ªã ƒë·ªÉ PyAutoGUI thao t√°c ch√≠nh x√°c.
      - C·ªë ƒë·ªãnh v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc c·ª≠a s·ªï.
      - T·∫Øt th√¥ng b√°o.
    """
    options = Options()

    # N·∫øu th∆∞ m·ª•c profile t·ªìn t·∫°i, th√™m ƒë·ªÉ Chrome load profile ƒë√£ login
    if user_data_dir and os.path.isdir(user_data_dir):
        options.add_argument(f"--user-data-dir={user_data_dir}")

    # Thi·∫øt l·∫≠p DPI scaling cho m√†n h√¨nh ƒë·ªô ph√¢n gi·∫£i cao
    options.add_argument("--high-dpi-support=1")
    options.add_argument(f"--force-device-scale-factor={device_scale_factor}")

    # C·ªë ƒë·ªãnh v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc c·ª≠a s·ªï ƒë·ªÉ PyAutoGUI thao t√°c ch√≠nh x√°c
    xpos, ypos = window_position
    width, height = window_size
    options.add_argument(f"--window-position={xpos},{ypos}")
    options.add_argument(f"--window-size={width},{height}")

    # T·∫Øt popup/notification
    options.add_argument("--disable-notifications")

    # Kh·ªüi t·∫°o ChromeDriver
    try:
        service = ChromeService(executable_path=chrome_driver_path)
        driver = webdriver.Chrome(service=service, options=options)
    except Exception as e:
        print("‚ùå L·ªói khi kh·ªüi t·∫°o ChromeDriver. Vui l√≤ng ki·ªÉm tra:")
        print("   1) CHROME_DRIVER_PATH c√≥ ƒë√∫ng kh√¥ng?")
        print("   2) ChromeDriver c√≥ kh·ªõp v·ªõi phi√™n b·∫£n Chrome ƒëang d√πng kh√¥ng?")
        print("   3) USER_DATA_DIR c√≥ t·ªìn t·∫°i v√† h·ª£p l·ªá kh√¥ng?")
        print("Chi ti·∫øt l·ªói:", e)
        sys.exit(1)

    return driver


def like_button(driver):
    # ===========================
    # 1. T√¨m t·∫•t c·∫£ n√∫t "Th√≠ch" r·ªìi click t·ª´ng c√°i
    # ===========================
    try:
        like_spans = driver.find_elements(
            By.CSS_SELECTOR, "span[data-e2e='like-icon']"
        )  # like-icon
        browse_like_icon = driver.find_elements(
            By.CSS_SELECTOR, "span[data-e2e='browse-like-icon']"
        )  # browse-like-icon
        if not like_spans:
            like_spans = browse_like_icon

        print(f"üîç T√¨m th·∫•y {len(like_spans)} n√∫t Th√≠ch.")
        for idx, btn in enumerate(like_spans, start=1):
            try:
                # L·∫•y ph·∫ßn t·ª≠ cha (button) t·ª´ span n·∫øu c·∫ßn
                parent_button = btn.find_element(By.XPATH, "./ancestor::button[1]")
                parent_button.click()
                print(f"  ‚úì ƒê√£ click n√∫t Th√≠ch th·ª© {idx}.")
                time.sleep(1)  # ƒë·ª£i TikTok ghi nh·∫≠n
            except Exception as e:
                print(f"  ‚ö† L·ªói khi click n√∫t Th√≠ch th·ª© {idx}: {e}")
    except Exception as e:
        print(f"    ‚ùå L·ªói khi t√¨m/nh·∫•n n√∫t Like (Tym):", e)


def click_undefined_button(driver):
    """
    T√¨m t·∫•t c·∫£ <span> c√≥ attribute data-e2e="undefined-icon", sau ƒë√≥ click v√†o n√∫t <button> cha ch·ª©a n√≥.
    """
    try:
        # XPath t√¨m t·∫•t c·∫£ span c√≥ data-e2e="undefined-icon"
        span_elements = driver.find_elements(
            By.CSS_SELECTOR, "span[data-e2e='undefined-icon']"
        )  # undefined-icon
        print(f"üîç T√¨m th·∫•y {len(span_elements)} n√∫t th√™m v√†o m·ª•c y√™u th√≠ch")

        for idx, span in enumerate(span_elements, start=1):
            try:
                # L·∫•y n√∫t button cha g·∫ßn nh·∫•t
                button = span.find_element(By.XPATH, "./ancestor::button[1]")

                # Scroll button v√†o gi·ªØa m√†n h√¨nh
                driver.execute_script(
                    "arguments[0].scrollIntoView({block: 'center'});", button
                )
                time.sleep(0.5)

                # Click button
                button.click()
                print(f"  ‚úì ƒê√£ click button th·ª© {idx} n√∫t m·ª•c y√™u th√≠ch")
                time.sleep(1)
            except Exception as e:
                print(f"  ‚ö† L·ªói khi click button th·ª© {idx}: {e}")
    except Exception as e:
        print(f"  ‚ö† L·ªói khi t√¨m n√∫t th√™m v√†o m·ª•c y√™u th√≠ch")


def click_all_follow_buttons(driver):
    """
    T√¨m t·∫•t c·∫£ c√°c n√∫t Follow b√™n trong div c√≥ data-e2e="browse-follow"
    r·ªìi click t·ª´ng n√∫t.
    """
    # T√¨m t·∫•t c·∫£ c√°c div ch·ª©a n√∫t Follow theo attribute data-e2e
    try:
        follow_wrappers = driver.find_elements(
            By.CSS_SELECTOR, 'div[data-e2e="browse-follow"]'
        )
        print(f"üîç T√¨m th·∫•y {len(follow_wrappers)} ph·∫ßn t·ª≠ ch·ª©a n√∫t Follow.")
        for idx, wrapper in enumerate(follow_wrappers, start=1):
            try:
                # T√¨m button con b√™n trong wrapper
                follow_button = wrapper.find_element(By.TAG_NAME, "button")

                # Scroll button v√†o gi·ªØa m√†n h√¨nh ƒë·ªÉ ƒë·∫£m b·∫£o click ch√≠nh x√°c
                driver.execute_script(
                    "arguments[0].scrollIntoView({block: 'center'});", follow_button
                )
                time.sleep(0.5)

                # Click n√∫t Follow
                follow_button.click()
                print(f"  ‚úì ƒê√£ click n√∫t Follow th·ª© {idx}.")
                time.sleep(1)  # ƒê·ª£i trang x·ª≠ l√Ω click
            except Exception as e:
                print(f"  ‚ö† L·ªói khi click n√∫t Follow th·ª© {idx}: {e}")
    except Exception as e:
        print(f"  ‚ö† L·ªói khi t√¨m n√∫t theo d√µi (Follow)")


def click_all_comment_like_icons(driver):
    """
    T√¨m t·∫•t c·∫£ c√°c div c√≥ attribute data-e2e="comment-like-icon" r·ªìi click t·ª´ng c√°i.
    """
    try:
        # T√¨m t·∫•t c·∫£ ph·∫ßn t·ª≠ div c√≥ data-e2e="comment-like-icon"
        like_icons = driver.find_elements(
            By.CSS_SELECTOR, 'div[data-e2e="comment-like-icon"]'
        )
        print(f"üîç T√¨m th·∫•y {len(like_icons)} icon 'comment-like'.")

        for idx, icon in enumerate(like_icons, start=1):
            try:
                # CLick ƒë·∫øn n√∫t th√≠ch b√¨nh lu·∫≠n th·ª© 8 th√¨ d·ª´ng l·∫°i
                if idx == 5:
                    break

                # Scroll icon v√†o gi·ªØa m√†n h√¨nh ƒë·ªÉ ch·∫Øc ch·∫Øn n√≥ hi·ªÉn th·ªã
                driver.execute_script(
                    "arguments[0].scrollIntoView({block: 'center'});", icon
                )
                time.sleep(0.5)  # ƒê·ª£i animation scroll

                # Click v√†o icon (div)
                icon.click()
                print(f"  ‚úì ƒê√£ click icon 'comment-like' th·ª© {idx}.")
                time.sleep(1)  # ƒê·ª£i trang ghi nh·∫≠n click
            except Exception as e:
                print(f"  ‚ö† L·ªói khi click icon th·ª© {idx}: {e}")
    except Exception as e:
        print(f"  ‚ö† L·ªói khi t√¨m n√∫t th√≠ch b√¨nh lu·∫≠n")


def press_arrow_down():
    # Th·ªùi gian ƒë·ª£i tr∆∞·ªõc khi g·ª≠i ph√≠m (n·∫øu c·∫ßn)
    time.sleep(2.5)
    # -------------------------------------
    pyautogui.keyDown("down")  # Nh·∫•n gi·ªØ
    pyautogui.keyDown("down")  # Nh·∫•n gi·ªØ
    pyautogui.keyUp('down')   # Th·∫£ ph√≠m
    # -------------------------------------

    # -------------------------------------
    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # time.sleep(0.2)            # Gi·ªØ key
    # pyautogui.keyUp('down')   # Th·∫£ ph√≠m

    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # pyautogui.keyDown('down') # Nh·∫•n gi·ªØ
    # time.sleep(0.2)           # Gi·ªØ key
    # pyautogui.keyUp('down')   # Th·∫£ ph√≠m
    # -------------------------------------


def type_comment_with_pyautogui_and_post(driver, comment_text="Great video!"):
    """
    1. T√¨m √¥ nh·∫≠p comment (div contenteditable).
    2. Click v√†o ƒë·ªÉ focus, d√πng pyautogui g√µ comment_text.
    3. Ch·ªù n√∫t ƒêƒÉng chuy·ªÉn t·ª´ aria-disabled="true" sang "false".
    4. Click n√∫t ƒêƒÉng ƒë·ªÉ g·ª≠i.
    """
    try:
        # 1. T√¨m √¥ nh·∫≠p comment (contenteditable div)
        editable_divs = driver.find_elements(
            By.CSS_SELECTOR, 'div[contenteditable="true"][role="textbox"]'
        )
        if not editable_divs:
            print("‚ùå Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p comment.")
        input_div = editable_divs[0]

        # Scroll ƒë·∫øn input_div v√† click ƒë·ªÉ focus
        driver.execute_script(
            "arguments[0].scrollIntoView({block: 'center'});", input_div
        )
        time.sleep(0.5)
        input_div.click()
        time.sleep(0.5)  # ƒë·ª£i focus ·ªïn ƒë·ªãnh

        #------------------------------
        # 2. X√≥a n·ªôi dung c≈© (n·∫øu c√≥)
        input_div.send_keys(Keys.CONTROL, 'a')  # Ctrl+A ch·ªçn t·∫•t c·∫£ (macOS d√πng Keys.COMMAND)
        time.sleep(0.1)
        input_div.send_keys(Keys.BACKSPACE)     # X√≥a

        # 3. G·ª≠i comment m·ªõi b·∫±ng send_keys
        input_div.send_keys(comment_text)
        time.sleep(0.5)
        #------------------------------
        #------------------------------
        # 2. X√≥a n·ªôi dung c≈© (n·∫øu c√≥)
        input_div.send_keys(Keys.CONTROL, 'a')  # Ctrl+A ch·ªçn t·∫•t c·∫£ (macOS d√πng Keys.COMMAND)
        time.sleep(0.1)
        input_div.send_keys(Keys.BACKSPACE)     # X√≥a

        # 3. G·ª≠i comment m·ªõi b·∫±ng send_keys
        input_div.send_keys(comment_text)
        time.sleep(0.5)
        #------------------------------

        # 3. T√¨m n√∫t ƒêƒÉng
        post_buttons = driver.find_elements(
            By.CSS_SELECTOR, "div[data-e2e='comment-post']"
        )
        if not post_buttons:
            print("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t ƒêƒÉng.")
        post_button = post_buttons[0]

        # 4. Ch·ªù n√∫t ƒêƒÉng enabled (aria-disabled="false")
        timeout = 5  # gi√¢y
        poll_interval = 0.5
        elapsed = 0
        while elapsed < timeout:
            aria_disabled = post_button.get_attribute("aria-disabled")
            if aria_disabled == "false":
                # Scroll v√† click n√∫t ƒêƒÉng
                driver.execute_script(
                    "arguments[0].scrollIntoView({block: 'center'});", post_button
                )
                time.sleep(0.3)
                post_button.click()
                print("‚úì ƒê√£ g·ª≠i b√¨nh lu·∫≠n.")
            time.sleep(poll_interval)
            elapsed += poll_interval
        print("‚ö† N√∫t ƒêƒÉng kh√¥ng ƒë∆∞·ª£c b·∫≠t trong th·ªùi gian ch·ªù.")
    except Exception as e:
        print("    ‚ùå L·ªói khi t√¨m/nh·∫•n n√∫t Next (Chuy·ªÉn video):", e)


def main():
    # Kh·ªüi ƒë·ªông WebDriver v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
    driver = setup_driver()

    # M·ªü r·ªông c·ª≠a s·ªï tr√¨nh duy·ªát ƒë·ªÉ PyAutoGUI click ch√≠nh x√°c
    driver.maximize_window()

    # ƒêi·ªÅu h∆∞·ªõng t·ªõi TikTok
    driver.get(TIKTOK_URL_EXPLORE)

    # ƒê·ª£i t·∫°m 5s ƒë·ªÉ ƒë·∫£m b·∫£o JS, CSS, video, popup load xong
    time.sleep(5)

    print("‚ñ∂ B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p t·ª± ƒë·ªông Like + Next. Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.")
    try:
        # V√≤ng l·∫∑p v√¥ h·∫°n: Like r·ªìi Next li√™n t·ª•c
        while True:
            # ========== D√πng pyautogui x·ª≠ l√Ω ph√≠m m≈©i t√™n xu·ªëng ƒë·ªÉ chy·ªÉn ti·∫øp video ==========
            press_arrow_down()

            # ========== T√¨m v√† click n√∫t "Follow" (Theo d√µi)==========
            click_all_follow_buttons(driver)

            # ========== T√¨m v√† click n√∫t "Like" (Tym) ==========
            like_button(driver)

            # ========== T√¨m v√† click n√∫t "Undefined" (M·ª•c y√™u th√≠ch) ==========
            click_undefined_button(driver)

            # ========== T√¨m v√† nh·∫≠p text nh·∫•n n√∫t g·ª≠i b√¨nh lu·∫≠n ==========
            type_comment_with_pyautogui_and_post(driver)

            # ========== T√¨m v√† click n√∫t "Comment Like" (Tym) ==========
            click_all_comment_like_icons(driver)

            # ========== D√πng pyautogui x·ª≠ l√Ω ph√≠m m≈©i t√™n xu·ªëng ƒë·ªÉ chy·ªÉn ti·∫øp video ==========
            press_arrow_down()
    except KeyboardInterrupt:
        # Khi ng∆∞·ªùi d√πng nh·∫•n Ctrl+C, s·∫Ω b·∫Øt v√†o ƒë√¢y ƒë·ªÉ d·ªçn d·∫πp
        print("\n‚ñ† Nh·∫≠n l·ªánh d·ª´ng t·ª´ ng∆∞·ªùi d√πng, ch∆∞∆°ng tr√¨nh s·∫Ω ƒë√≥ng tr√¨nh duy·ªát.")
    finally:
        # ƒê·∫£m b·∫£o driver.quit() lu√¥n ƒë∆∞·ª£c g·ªçi d√π c√≥ l·ªói hay kh√¥ng
        driver.quit()
        print("‚ñ† Tr√¨nh duy·ªát ƒë√£ ƒë√≥ng. K·∫øt th√∫c ch∆∞∆°ng tr√¨nh.")


if __name__ == "__main__":
    main()
